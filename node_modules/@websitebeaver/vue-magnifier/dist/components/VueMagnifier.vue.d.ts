export type MgShape = 'circle' | 'square';
export interface Props {
    src: string;
    width?: string | number;
    height?: string | number;
    className?: string;
    zoomImgSrc?: string;
    zoomFactor?: number;
    mgWidth?: number;
    mgHeight?: number;
    mgBorderWidth?: number;
    mgShape?: MgShape;
    mgShowOverflow?: boolean;
    mgMouseOffsetX?: number;
    mgMouseOffsetY?: number;
    mgTouchOffsetX?: number;
    mgTouchOffsetY?: number;
    mgShow?: boolean;
    mgCornerBgColor?: string;
}
declare const _default: import("vue").DefineComponent<__VLS_TypePropsToRuntimeProps<Props>, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    "image:load": (event: Event) => void;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<__VLS_TypePropsToRuntimeProps<Props>>> & {
    "onImage:load"?: ((event: Event) => any) | undefined;
}, {}>;
export default _default;
type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
type __VLS_TypePropsToRuntimeProps<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: import('vue').PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: import('vue').PropType<T[K]>;
        required: true;
    };
};
