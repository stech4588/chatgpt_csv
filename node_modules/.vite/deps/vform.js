import {
  axios_default
} from "./chunk-KGUK2DZO.js";
import "./chunk-CF3WPAMV.js";

// node_modules/vform/dist/vform.es.js
var e = Object.defineProperty;
var t = Object.prototype.hasOwnProperty;
var s = Object.getOwnPropertySymbols;
var r = Object.prototype.propertyIsEnumerable;
var o = (t2, s2, r2) => s2 in t2 ? e(t2, s2, { enumerable: true, configurable: true, writable: true, value: r2 }) : t2[s2] = r2;
var i = (e2, i2) => {
  for (var a in i2 || (i2 = {}))
    t.call(i2, a) && o(e2, a, i2[a]);
  if (s)
    for (var a of s(i2))
      r.call(i2, a) && o(e2, a, i2[a]);
  return e2;
};
var n = (e2) => void 0 === e2;
var c = (e2) => Array.isArray(e2);
var l = (e2) => e2 && "number" == typeof e2.size && "string" == typeof e2.type && "function" == typeof e2.slice;
var u = (e2, t2, s2, r2) => ((t2 = t2 || {}).indices = !n(t2.indices) && t2.indices, t2.nullsAsUndefineds = !n(t2.nullsAsUndefineds) && t2.nullsAsUndefineds, t2.booleansAsIntegers = !n(t2.booleansAsIntegers) && t2.booleansAsIntegers, t2.allowEmptyArrays = !n(t2.allowEmptyArrays) && t2.allowEmptyArrays, s2 = s2 || new FormData(), n(e2) || (null === e2 ? t2.nullsAsUndefineds || s2.append(r2, "") : ((e3) => "boolean" == typeof e3)(e2) ? t2.booleansAsIntegers ? s2.append(r2, e2 ? 1 : 0) : s2.append(r2, e2) : c(e2) ? e2.length ? e2.forEach((e3, o2) => {
  const i2 = r2 + "[" + (t2.indices ? o2 : "") + "]";
  u(e3, t2, s2, i2);
}) : t2.allowEmptyArrays && s2.append(r2 + "[]", "") : ((e3) => e3 instanceof Date)(e2) ? s2.append(r2, e2.toISOString()) : !((e3) => e3 === Object(e3))(e2) || ((e3) => l(e3) && "string" == typeof e3.name && ("object" == typeof e3.lastModifiedDate || "number" == typeof e3.lastModified))(e2) || l(e2) ? s2.append(r2, e2) : Object.keys(e2).forEach((o2) => {
  const i2 = e2[o2];
  if (c(i2))
    for (; o2.length > 2 && o2.lastIndexOf("[]") === o2.length - 2; )
      o2 = o2.substring(0, o2.length - 2);
  u(i2, t2, s2, r2 ? r2 + "[" + o2 + "]" : o2);
})), s2);
var h = { serialize: u };
function d(e2) {
  if (null === e2 || "object" != typeof e2)
    return e2;
  const t2 = Array.isArray(e2) ? [] : {};
  return Object.keys(e2).forEach((s2) => {
    t2[s2] = d(e2[s2]);
  }), t2;
}
function f(e2) {
  return Array.isArray(e2) ? e2 : [e2];
}
function p(e2) {
  return e2 instanceof File || e2 instanceof Blob || e2 instanceof FileList || "object" == typeof e2 && null !== e2 && void 0 !== Object.values(e2).find((e3) => p(e3));
}
var y = class {
  constructor() {
    this.errors = {}, this.errors = {};
  }
  set(e2, t2) {
    "object" == typeof e2 ? this.errors = e2 : this.set(i(i({}, this.errors), { [e2]: f(t2) }));
  }
  all() {
    return this.errors;
  }
  has(e2) {
    return Object.prototype.hasOwnProperty.call(this.errors, e2);
  }
  hasAny(...e2) {
    return e2.some((e3) => this.has(e3));
  }
  any() {
    return Object.keys(this.errors).length > 0;
  }
  get(e2) {
    if (this.has(e2))
      return this.getAll(e2)[0];
  }
  getAll(e2) {
    return f(this.errors[e2] || []);
  }
  only(...e2) {
    const t2 = [];
    return e2.forEach((e3) => {
      const s2 = this.get(e3);
      s2 && t2.push(s2);
    }), t2;
  }
  flatten() {
    return Object.values(this.errors).reduce((e2, t2) => e2.concat(t2), []);
  }
  clear(e2) {
    const t2 = {};
    e2 && Object.keys(this.errors).forEach((s2) => {
      s2 !== e2 && (t2[s2] = this.errors[s2]);
    }), this.set(t2);
  }
};
var g = class _g {
  constructor(e2 = {}) {
    this.originalData = {}, this.busy = false, this.successful = false, this.recentlySuccessful = false, this.recentlySuccessfulTimeoutId = void 0, this.errors = new y(), this.progress = void 0, this.update(e2);
  }
  static make(e2) {
    return new this(e2);
  }
  update(e2) {
    this.originalData = Object.assign({}, this.originalData, d(e2)), Object.assign(this, e2);
  }
  fill(e2 = {}) {
    this.keys().forEach((t2) => {
      this[t2] = e2[t2];
    });
  }
  data() {
    return this.keys().reduce((e2, t2) => i(i({}, e2), { [t2]: this[t2] }), {});
  }
  keys() {
    return Object.keys(this).filter((e2) => !_g.ignore.includes(e2));
  }
  startProcessing() {
    this.errors.clear(), this.busy = true, this.successful = false, this.progress = void 0, this.recentlySuccessful = false, clearTimeout(this.recentlySuccessfulTimeoutId);
  }
  finishProcessing() {
    this.busy = false, this.successful = true, this.progress = void 0, this.recentlySuccessful = true, this.recentlySuccessfulTimeoutId = setTimeout(() => {
      this.recentlySuccessful = false;
    }, _g.recentlySuccessfulTimeout);
  }
  clear() {
    this.errors.clear(), this.successful = false, this.recentlySuccessful = false, this.progress = void 0, clearTimeout(this.recentlySuccessfulTimeoutId);
  }
  reset() {
    Object.keys(this).filter((e2) => !_g.ignore.includes(e2)).forEach((e2) => {
      this[e2] = d(this.originalData[e2]);
    });
  }
  get(e2, t2 = {}) {
    return this.submit("get", e2, t2);
  }
  post(e2, t2 = {}) {
    return this.submit("post", e2, t2);
  }
  patch(e2, t2 = {}) {
    return this.submit("patch", e2, t2);
  }
  put(e2, t2 = {}) {
    return this.submit("put", e2, t2);
  }
  delete(e2, t2 = {}) {
    return this.submit("delete", e2, t2);
  }
  submit(e2, t2, s2 = {}) {
    return this.startProcessing(), s2 = i({ data: {}, params: {}, url: this.route(t2), method: e2, onUploadProgress: this.handleUploadProgress.bind(this) }, s2), "get" === e2.toLowerCase() ? s2.params = i(i({}, this.data()), s2.params) : (s2.data = i(i({}, this.data()), s2.data), p(s2.data) && !s2.transformRequest && (s2.transformRequest = [(e3) => h.serialize(e3)])), new Promise((e3, t3) => {
      (_g.axios || axios_default).request(s2).then((t4) => {
        this.finishProcessing(), e3(t4);
      }).catch((e4) => {
        this.handleErrors(e4), t3(e4);
      });
    });
  }
  handleErrors(e2) {
    this.busy = false, this.progress = void 0, e2.response && this.errors.set(this.extractErrors(e2.response));
  }
  extractErrors(e2) {
    return e2.data && "object" == typeof e2.data ? e2.data.errors ? i({}, e2.data.errors) : e2.data.message ? { error: e2.data.message } : i({}, e2.data) : { error: _g.errorMessage };
  }
  handleUploadProgress(e2) {
    this.progress = { total: e2.total, loaded: e2.loaded, percentage: Math.round(100 * e2.loaded / e2.total) };
  }
  route(e2, t2 = {}) {
    let s2 = e2;
    return Object.prototype.hasOwnProperty.call(_g.routes, e2) && (s2 = decodeURI(_g.routes[e2])), "object" != typeof t2 && (t2 = { id: t2 }), Object.keys(t2).forEach((e3) => {
      s2 = s2.replace(`{${e3}}`, t2[e3]);
    }), s2;
  }
  onKeydown(e2) {
    const t2 = e2.target;
    t2.name && this.errors.clear(t2.name);
  }
};
g.routes = {}, g.errorMessage = "Something went wrong. Please try again.", g.recentlySuccessfulTimeout = 2e3, g.ignore = ["busy", "successful", "errors", "progress", "originalData", "recentlySuccessful", "recentlySuccessfulTimeoutId"];
var vform_es_default = g;
export {
  y as Errors,
  g as Form,
  vform_es_default as default
};
//# sourceMappingURL=vform.js.map
